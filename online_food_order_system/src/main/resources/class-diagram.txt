## User Management ##
User<class>
name: str
password: str

userService<class>
getCurrentUser(): user
registerUser(name, password): boolean
login(name, password): user
logout(): boolean

presaved user: (user1, 123), (user2, 123), (user3, 123), (admin, 123)

## Restaurant Management ##
Item <class>
name: str
price: double

Restaurant <class>
name: str
menu: List<Item>

RestaurantItem:
restaurant_name: str
item: Item

RestaurantService <class>
addRestaurant(restaurant_name, Map<str, double> menuItems): Restaurant
viewRestaurants(): List<Restaurant>
searchRestaurant(searchKey): List<RestaurantItem> search_key can be restaurant_name/item_name
viewMenu(restaurantName): List<Item>


## Order Management ##
Cart <class>
restaurantName: str
selectedItems: List<Item>
user: User
totalCost: double

OrderStatus<enum>:
Order
PAID
DELIVERED
CANCEL

Order:
restaurantName: str
selectedItems: List<Item>
user:User
totalCost: double
orderStatus: OrderStatus
orderId: str (<userName>-<orderCount>)

OrderService <class>
addToCart(restaurantName, selectedItems): void
viewCart(): Cart
removeFromCart(item): Cart
clearCart(): boolean
placeOrder(): Order
viewOrders(): List<Order>
viewOrderStatus(orderId): OrderStatus
updateOrderStatus(orderId, orderStatus): void admin only
viewAllOrders(): List<Order> admin only





